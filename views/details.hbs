<html lang="en">
        <head>
            <meta charset="utf-8" />
            <meta name="viewport" content="initial-scale=1,maximum-scale=1,user-scalable=no" />
            <title>Line of sight widget | Sample | ArcGIS Maps SDK for JavaScript 4.31</title>

             <link rel="stylesheet" href="https://js.arcgis.com/4.31/esri/themes/light/main.css" /> 
                <script src="https://js.arcgis.com/4.31/"></script>
             
            <style>
            #viewDiv {
                padding: 0;
                margin-right: 20px;
                height: 70vh;
                width: 150vh;
            }
            #menu {
                padding: 1em;
            }
            </style>
    </head>

    <body>
            <main style="max-width: 1200px; margin: 20px auto; font-family: Arial, sans-serif;">
            <!-- Name and Images -->
            <section style="margin-bottom: 30px;">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <h1 style="font-size: 32px; font-weight: bold; margin-bottom: 20px">{{listing.name}}</h1>
                    {{#if isLoggedIn}}
                    <div>
                      <a href="/api/list/edit/{{listing._id}}">
                        <button  style="margin-right: 10px; padding: 10px 20px; background-color: #007bff; color: white; border: none; border-radius: 5px;">Update</button>
                        </a>
                        <button id="delete-btn" style="padding: 10px 20px; background-color: #dc3545; color: white; border: none; border-radius: 5px;">Delete</button>
                    </div>
                    {{/if}}
                </div>
                <div style="display: flex; gap: 20px; flex-wrap: wrap; margin-top: 10px;">
                    <div style="flex: 1; max-width: 500px;">
                        <img src="{{listing.images.picture_url}}" alt="Image of {{listing.name}}" style="width: 100%; border-radius: 10px;">
                    </div>
                    <div style="flex: 2;">
                        <h2 style="font-size: 24px; font-weight: bold;">About This Place</h2>
                        <p style="margin-top: 10px;">{{listing.description}}</p>
                    </div>
                </div>
            </section>

            <section style="display: flex; gap: 30px; flex-wrap: wrap; justify-content: space-between; margin-top: 30px;">
                <!-- Left side: Amenities Section -->
                <div style="flex: 1; min-width: 300px; padding: 20px; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                    <h2 style="font-size: 24px; font-weight: bold; color: #333; margin-bottom: 20px;">What This Place Offers</h2>
                    <div style="display: grid; grid-template-columns: repeat(auto-fill, minmax(150px, 1fr)); gap: 20px; margin-top: 10px;">
                        {{#each listing.amenities}}
                        <div style="text-align: center; font-size: 14px; color: #555; padding: 10px; border-radius: 5px; background-color: #fff; box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);">
                            <p style="margin: 0;">{{this}}</p>
                        </div>
                        {{/each}}
                    </div>
                </div>

                <!-- Right side: Reservation Form -->
                <div style="flex: 1; min-width: 300px; padding: 20px; background-color: #f9f9f9; border-radius: 8px; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);">
                    <h2 style="font-size: 24px; font-weight: bold; color: #333; margin-bottom: 20px;">Reservation Details</h2>
                    <form id="reservation-form" style="margin-top: 20px;" action="/api/list/fees/{{listing._id}}" method="GET">
                        <div style="display: flex; gap: 20px; flex-wrap: wrap;">
                            <div style="flex: 1;">
                                <label for="check-in" style="font-weight: bold;">Check-In</label>
                                <input type="date" id="check-in" name="startDate" style="width: 100%; padding: 10px; margin-top: 5px; border-radius: 5px; border: 1px solid #ddd;">
                            </div>
                            <div style="flex: 1;">
                                <label for="check-out" style="font-weight: bold;">Check-Out</label>
                                <input type="date" id="check-out" name="endDate" style="width: 100%; padding: 10px; margin-top: 5px; border-radius: 5px; border: 1px solid #ddd;">
                            </div>
                        </div>
                        <div style="margin-top: 20px;">
                            <label for="guests" style="font-weight: bold;">Guests</label>
                            <input type="number" id="guests" name="numberOfGuests" value="1" style="width: 100%; padding: 10px; margin-top: 5px; border-radius: 5px; border: 1px solid #ddd;">
                        </div>
                        <button type="submit" id="reserve-btn" style="margin-top: 30px; padding: 10px 20px; background-color: #ff385c; color: white; border: none; border-radius: 5px; width: 100%;">Reserve</button>
                    </form>
                    <p id="availability-msg" style="color: red; font-weight: bold; display: none;">Sorry, this property is not available for the selected dates.</p>
                </div>
            </section>

            <!-- Host Information -->
            <section style="margin-bottom: 30px; margin-top: 30px;">
                <h2 style="font-size: 24px; font-weight: bold;">About the Host</h2>
                <div style="display: flex; gap: 15px;">
                    <img src="{{listing.host.host_picture_url}}" alt="Host Picture" style="width: 100px; height: 100px; border-radius: 50%; object-fit: cover;">
                    <div>
                        <p><strong>{{listing.host.host_name}}</strong></p>
                        <p>{{listing.host.host_about}}</p>
                        <a href="{{listing.host.host_url}}" target="_blank">View Host Profile</a>
                    </div>
                </div>
            </section>

            <!-- Cancellation Policy and House Rules -->
            <section style="margin-bottom: 30px;">
                <h2 style="font-size: 24px; font-weight: bold;">Cancellation Policy</h2>
                <p>{{listing.cancellation_policy}}</p>
                <h2 style="font-size: 24px; font-weight: bold; margin-top: 20px;">House Rules</h2>
                <p>{{listing.house_rules}}</p>
            </section>
            <section style="margin-bottom: 30px;">
                <div id="viewDiv">
                    <div id="menu" class="esri-widget">
                        <h3>Line of sight analysis</h3>
                        <input type="checkbox" id="layerVisibility" checked><label for="layerVisibility">Show development layer</label>
                        <div id="losWidget"></div>
                    </div>
                </div>
            </section>
            <!-- Reviews -->
            <section style="margin-bottom: 30px;">
                <h2 style="font-size: 24px; font-weight: bold;">Reviews</h2>
                <div id="reviews-container">
                    {{#each listing.reviews}}
                    <div style="border-bottom: 1px solid #ddd; padding: 10px 0;">
                        <p><strong>{{this.reviewer_name}}</strong> - <span style="color: #ff385c;">{{rating}} â˜…</span></p>
                        <p>{{this.comments}}</p>
                    </div>
                    {{/each}}
                </div>

                {{#if (gt listing.reviews.length 10)}}
                <button id="show-more-reviews" onclick="toggleReviews()">Show More</button>
                {{/if}}
            </section>
        </main>
    

    </script>

    <script>
      require([
        "esri/WebScene",
        "esri/views/SceneView",
        "esri/widgets/LineOfSight",
        "esri/widgets/Expand",
        "esri/geometry/Point",
        "esri/Graphic",
        "esri/core/reactiveUtils"
      ], (WebScene, SceneView, LineOfSight, Expand, Point, Graphic, reactiveUtils) => {

      /********************
       * Load a web scene and set it to the map property in a SceneView.
       ********************/
      const scene = new WebScene({
        portalItem: {
          id: "82127fea11d6439abba3318cb93252f7"
        }
      });

      const view = new SceneView({
        map: scene,
        container: "viewDiv"
      });

      /**************
       * Initialize the LineOfSight widget
       **************/

      const lineOfSight = new LineOfSight({
        view: view,
        container: "losWidget"
      });

      /**************
       * Add symbols to mark the intersections
       * for the line of sight
       **************/

      const viewModel = lineOfSight.viewModel;

      // watch when observer location changes
      reactiveUtils.watch(() => viewModel.observer, () => {
          setIntersectionMarkers();
      });

      // watch when a new target is added or removed
      viewModel.targets.on("change", (event) => {
        event.added.forEach((target) => {
          setIntersectionMarkers();
          // for each target watch when the intersection changes
          reactiveUtils.watch(() => target.intersectedLocation, () => {
            setIntersectionMarkers();
          });
        });
        event.removed.forEach(() => {
          // remove intersection markers for removed targets (remove with right click on target)
          setIntersectionMarkers();
        });
      });

      // an inverted cone marks the intersection that occludes the view
      const intersectionSymbol = {
        type: "point-3d",
        symbolLayers: [{
          type: "object",
          resource: { primitive: "inverted-cone"},
          material: { color: [255, 100, 100] },
          height: 10,
          depth: 10,
          width: 10,
          anchor: "relative",
          anchorPosition: { x: 0, y: 0, z: -0.7 }
        }]
      };

      function setIntersectionMarkers() {
        view.graphics.removeAll();
        viewModel.targets.forEach((target) => {
          if (target.intersectedLocation) {
            const graphic = new Graphic({
              symbol: intersectionSymbol,
              geometry: target.intersectedLocation
            });
            view.graphics.add(graphic);
          }
        });
      }

      /**************
       * Create an analysis by setting
       * the initial observer and four targets
       **************/

      viewModel.observer = new Point({
        latitude: 42.3521,
        longitude:  -71.0564,
        z: 139
      });

      viewModel.targets = [
        createTarget(42.3492, -71.0529),
        createTarget(42.3477, -71.0542),
        createTarget(42.3485, -71.0533),
        createTarget(42.3467, -71.0549)
      ];

      function createTarget(lat, lon, z) {
        return {
          location: new Point({
            latitude: lat,
            longitude: lon,
            z: z || 0
          })
        };
      }

      // add an Expand widget to make the menu responsive
      const expand = new Expand({
        expandTooltip: "Expand line of sight widget",
        view: view,
        content: document.getElementById("menu"),
        expanded: true
      });

      view.ui.add(expand, "top-right");

      view.when(() => {

        // allow user to turn the layer with new planned buildings on/off
        // and see how the line of sight analysis changes
        const plannedBuildingsLayer = view.map.layers.filter((layer) => {
          return layer.title === "Boston major projects - MajorProjectsBuildings";
        }).getItemAt(0);

        document.getElementById("layerVisibility").addEventListener("change", (event) => {
          plannedBuildingsLayer.visible = event.target.checked;
        });
      });

      });
    </script>

    <script >
        function toggleAmenities() {
            const amenitiesList = document.querySelectorAll('#amenities-list li:nth-child(n+11)');
            amenitiesList.forEach(item => item.style.display = item.style.display === 'none' ? 'block' : 'none');
        }
        
        function toggleReviews() {
            const reviewList = document.querySelectorAll('#reviews-container div:nth-child(n+11)');
            reviewList.forEach(item => item.style.display = item.style.display === 'none' ? 'block' : 'none');
        }
        
        document.getElementById('delete-btn').addEventListener('click', function() {
            if (confirm('Are you sure you want to delete this listing?')) {
                fetch(/api/list/{{listing._id}}, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                })
                .then(response => {
                    if (response.ok) {
                        alert('Listing deleted successfully.');
                        window.location.href = 'http://localhost:8000/api/list?page=1&perPage=5'; // Redirect to home page or another page
                    } else {
                        alert('Failed to delete the listing.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('An error occurred while deleting the listing.');
                });
            }
        });
        
        
        </script>
        </body>
    </html>